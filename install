#!/usr/bin/env python
from __future__ import print_function

import json
import os
import re
from subprocess import call


PROJECT_PATH = os.getcwd()
MANAGE_FILE = os.path.join(PROJECT_PATH, "manage.py")


def print_error(message):
    print("\033[91m{0}\033[0m".format(message))


def print_info(message):
    print("\033[94m{0}\033[0m".format(message))


def print_warning(message):
    print("\033[93m{0}\033[0m".format(message))


def get_project_name():
    with open(os.path.join(PROJECT_PATH, "manage.py")) as file_:
        content = file_.read()
        
    default_settings_module = re.findall(
        r"[\"\']DJANGO_SETTINGS_MODULE[\"']\s*,\s*[\"\'](.*)[\"\']",
        content
    )
    
    if len(default_settings_module) == 0:
        return None

    return default_settings_module[0].split(".")[0] 


class BaseFile(object):
    
    @property
    def permissions(self):
        return 644

    @property
    def filepath(self):
        raise NotImplementedError

    def content(self, env):
        raise NotImplementedError


class GitIgnoreFile(BaseFile):

    @property
    def filepath(self):
        return ".gitignore"

    def content(self, env):
        return [
            # System files
            ".DS_Store",
            "",
            # c9
            "/.c9",
            # Python
            "*.py",
            "__pycache__",
            "",
            # Virtualenv
            "/venv",
            # SQLite
            "*.sqlite3",
            "",
            # Coverage
            "/.coverage",
            "/coverage",
        ]


class CoverageRcFile(BaseFile):
    
    @property
    def filepath(self):
        return ".coveragerc"

    def content(self, env):
        return [
            "[run]",
            "branch = true",
            "source = {0:s}".format(env["PROJECT_NAME"]),
            "omit = manage.py,*/migrations/*,*/tests/*,*/tests.py",
            "",
            "[html]",
            "directory = coverage",
        ]


class TravisCiFile(BaseFile):
    
    @property
    def filepath(self):
        return ".travis.yml"

    def content(self, env):
        return [
            "language: python",
            "python:",
            "  - \"3.4\"", # c9 Python version
            "install:",
            "  - pip install requirements.txt",
            "  - pip install requirements-test.txt",
            "script: python manage.py test",
        ]


class PythonBuildRequirementsFile(BaseFile):

    @property
    def filepath(self):
        return "requirements.txt"

    def content(self, env):
        return [
            "Django==1.11.11",
            "dj_database_url==0.5.0",
            "whitenoise==3.3.1",
            "gunicorn==19.7.1",
            "psycopg2==2.7.4",
        ]


class PythonDevRequirementsFile(BaseFile):

    @property
    def filepath(self):
        return "requirements-dev.txt"

    def content(self, env):
        return [
            "ikpdb",
        ]


class PythonTestRequirementsFile(BaseFile):

    @property
    def filepath(self):
        return "requirements-test.txt"

    def content(self, env):
        return [
            "coverage==4.5.1",
        ]


class RunTestsScriptFile(BaseFile):

    @property
    def permissions(self):
        return 755
    
    @property
    def filepath(self):
        return "runtests.sh"

    def content(self, env):
        return [
            "#!/bin/bash",
            "",
            "set -e",
            "",
            "DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"",
            "",
            "COVERAGE_HTML=\"${DIR}/coverage\"",
            "",
            "",
            "COMMAND=${DIR}/venv/bin/coverage"
            "",
            "${COMMAND} run ${DIR}/manage.py test --verbosity=2 $@ && ${COMMAND} html -d ${COVERAGE_HTML} && ${COMMAND} report -m",
        ]


class DjangoC9RunnerFile(BaseFile):
    
    @property
    def filepath(self):
        return os.path.join(".c9", "runners", "django-agile-venv.run")

    def content(self, env):
        runners_dir = os.path.join(env["PROJECT_PATH"], ".c9", "runners")

        command = [
            os.path.join(env["PROJECT_PATH"], "venv", "bin", "python"),
            MANAGE_FILE,
            "runserver $ip:$port"
        ]

        content = {
            "cmd": [
                "bash",
                "--login",
                "-c",
                " ".join(command),
            ],
            "working_dir": "$project_path",
            "info": "Your code is running at \\033[01;34m$url\\033[00m.\n\\033[01;31m"
        }

        return json.dumps(content, indent=2)


class DjangoC9ProjectSettingsFile(BaseFile):

    @property
    def filepath(self):
        return os.path.join(".c9", "project.settings")

    def content(self, env):
        runner = {
            "django-agile": {
            "default": True,
            "name": "django-agile",
                "runner": "django-agile-venv",
                "toolbar": True
            }
        }

        SETTINGS_FILE = os.path.join(env["PROJECT_PATH"], ".c9", "project.settings")

        with open(SETTINGS_FILE) as file_:
            content = json.load(file_)

        content["run"]["configs"]["json()"] = runner

        return json.dumps(content, indent=2)


class BaseCommand(object):

    def parts(self, env, **ka):
        raise NotImplementedError


class CreateVirtualenvCommand(BaseCommand):

    def parts(self, env, **ka):
        return [
            "virtualenv",
            "-p",
            "python3",
            os.path.join(PROJECT_PATH, "venv")
        ]


class PipInstallCommand(BaseCommand):

    def parts(self, env, **ka):

        file_ = ka.get("file_")

        file_abs_path = os.path.join(
            PROJECT_PATH,
            "requirements{0:s}.txt".format("-" + file_ if file_ else "")
        )

        return [
            os.path.join(PROJECT_PATH, "venv", "bin", "pip"),
            "install",
            "-r",
            file_abs_path
        ]


FILE_GENERATORS = (
    GitIgnoreFile(),
    CoverageRcFile(),
    TravisCiFile(),
    PythonBuildRequirementsFile(),
    # PythonDevRequirementsFile(),
    PythonTestRequirementsFile(),
    RunTestsScriptFile(),
    DjangoC9RunnerFile(),
    DjangoC9ProjectSettingsFile(),
)


if __name__ == "__main__":
    if not os.path.exists(MANAGE_FILE):
        print_error("manage.py file doesn't exist in the current directory")
        exit(1)

    env = {
        "PROJECT_PATH": PROJECT_PATH,
        "PROJECT_NAME": get_project_name()
    }
    
    if not env["PROJECT_NAME"]:
        print_error("Project name wasn't found in manage.py file")
        exit(1)

    print_warning("Creating static files")

    for generator in FILE_GENERATORS:
        file_content = generator.content(env)

        print_info(generator.filepath)
        
        payload = file_content if isinstance(file_content, basestring) else "\n".join(file_content)
        
        file_path = os.path.join(PROJECT_PATH, generator.filepath)
        file_directory = os.path.dirname(file_path)

        if not os.path.isdir(file_directory):
            os.makedirs(file_directory)
    
        with open(file_path, "w") as file_:
            file_.write(payload)

        call([
            "chmod",
            "{0:d}".format(generator.permissions),
            os.path.join(PROJECT_PATH, generator.filepath)
        ])


    print_warning("Creating virtualenv")
    call(CreateVirtualenvCommand().parts(env))
        
    print_warning("Installing requirements in virtualenv")
    for file_ in [None, "test"]:
        call(PipInstallCommand().parts(env, file_=file_))
