#!/usr/bin/env python
from __future__ import print_function

import json
import os
import re
from subprocess import call


PROJECT_PATH = os.getcwd()
MANAGE_FILE = os.path.join(PROJECT_PATH, "manage.py")


def print_error(message):
    print("\033[91m{0}\033[0m".format(message))


def print_info(message):
    print("\033[94m{0}\033[0m".format(message))


def print_warning(message):
    print("\033[93m{0}\033[0m".format(message))


def get_project_name():
    with open(os.path.join(PROJECT_PATH, "manage.py")) as file_:
        content = file_.read()
        
    default_settings_module = re.findall(
        r"[\"\']DJANGO_SETTINGS_MODULE[\"']\s*,\s*[\"\'](.*)[\"\']",
        content
    )
    
    if len(default_settings_module) == 0:
        return None

    return default_settings_module[0].split(".")[0] 


def genfile_gitignore(env):
    content = [
        # System files
        ".DS_Store",
        "",
        # c9
        "/.c9",
        # Python
        "*.py",
        "__pycache__",
        "",
        # Virtualenv
        "/venv",
        # SQLite
        "*.sqlite3",
        "",
        # Coverage
        "/.coverage",
        "/coverage",
    ]

    return ('.gitignore', content + [""])


def genfile_coveragerc(env):
    content = [
        "[run]",
        "branch = true",
        "source = {0:s}".format(env['project_name']),
        "omit = manage.py,*/migrations/*,*/tests/*,*/tests.py",
        "",
        "[html]",
        "directory = coverage",
    ]

    return ('.coveragerc', content + [""])


def genfile_travis(env):
    content = [
        "language: python",
        "python:",
        "  - \"3.4\"", # c9 Python version
        "install:",
        "  - pip install requirements.txt",
        "  - pip install requirements-test.txt",
        "script: python manage.py test",
    ]

    return ('.travis.yml', content + [""])


def genfile_python_requirements(env):
    content = [
        "Django==1.11.11",
        "dj_database_url==0.5.0",
        "whitenoise==3.3.1",
        "gunicorn==19.7.1",
        "psycopg2==2.7.4",
    ]

    return ('requirements.txt', content + [""])


def genfile_python_requirements_dev(env):
    content = [
        "ikpdb",
    ]

    return ('requirements-dev.txt', content + [""])


def genfile_python_requirements_test(env):
    content = [
        "coverage==4.5.1",
    ]

    return ('requirements-test.txt', content + [""])


def genfile_run_tests(env):
    content = [
        "#!/bin/bash",
        "",
        "set -e",
        "",
        "DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"",
        "",
        "COVERAGE_HTML=\"${DIR}/coverage\"",
        "",
        "",
        "COMMAND=${DIR}/venv/bin/coverage"
        "",
        "${COMMAND} run ${DIR}/manage.py test --verbosity=2 $@ && ${COMMAND} html -d ${COVERAGE_HTML} && ${COMMAND} report -m",
    ]

    return ('runtests.sh', content + [""])


def genfile_c9_runner(env):
    
    runners_dir = os.path.join(PROJECT_PATH, ".c9", "runners")
    
    # TODO: fix this
    if not os.path.isdir(runners_dir):
        os.makedirs(runners_dir)

    command = [
        os.path.join(PROJECT_PATH, "venv", "bin", "python"),
        MANAGE_FILE,
        "runserver $ip:$port"
    ]

    content = {
        "cmd": [
            "bash",
            "--login",
            "-c",
            " ".join(command),
        ],
        "working_dir": "$project_path",
        "info": "Your code is running at \\033[01;34m$url\\033[00m.\n\\033[01;31m"
    }
    
    return (
        os.path.join(".c9", "runners", "django-agile-venv.run"),
        json.dumps(content, indent=2)
    )


def genfile_c9_project_settings(env):
    runner = {
        "django-agile": {
        "default": True,
        "name": "django-agile",
            "runner": "django-agile-venv",
            "toolbar": True
        }
    }
    
    SETTINGS_FILE = os.path.join(PROJECT_PATH, ".c9", "project.settings")
    
    with open(SETTINGS_FILE) as file_:
        content = json.load(file_)
    
    content["run"]["configs"]["json()"] = runner
    
    return (
        os.path.join(".c9", "project.settings"),
        json.dumps(content, indent=2)
    )


def command_virtualenv(env):
    call(["virtualenv", "-p", "python3", os.path.join(PROJECT_PATH, "venv")])


def command_virtualenv_pip_install(env, file_=None):
    if not file_:
        file_ = ""

    file_abs_path = os.path.join(
        PROJECT_PATH,
        "requirements{0:s}.txt".format("-" + file_ if file_ else "")
    )

    call([
        os.path.join(PROJECT_PATH, "venv", "bin", "pip"),
        "install",
        "-r",
        file_abs_path
    ])


FILE_GENERATORS = (
    genfile_gitignore,
    genfile_coveragerc,
    genfile_travis,
    genfile_python_requirements,
    # genfile_python_requirements_dev,
    genfile_python_requirements_test,
    genfile_run_tests,
    genfile_c9_runner,
    genfile_c9_project_settings,
)

COMMANDS = (
    command_virtualenv,
)


if __name__ == "__main__":
    if not os.path.exists(MANAGE_FILE):
        print_error("manage.py file doesn't exist in the current directory")
        exit(1)

    env = {
        "project_name": get_project_name()
    }
    
    if not env["project_name"]:
        print_error("Project name wasn't found in manage.py file")
        exit(1)

    print_warning("Creating static files")
    for file_generator in FILE_GENERATORS:
        file_data = file_generator(env)
        
        print_info(file_data[0])
        
        payload = file_data[1] if isinstance(file_data[1], basestring) else "\n".join(file_data[1])
    
        with open(os.path.join(PROJECT_PATH, file_data[0]), 'w') as file_:
            file_.write(payload)

    # TODO: fix this
    call(["chmod", "755", os.path.join(PROJECT_PATH, "runtests.sh")])

    print_warning("Creating virtualenv")
    command_virtualenv(env)
        
    print_warning("Installing requirements in virtualenv")
    for file_ in ["", "test"]:
        command_virtualenv_pip_install(env, file_)
